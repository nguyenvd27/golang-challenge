// Code generated by MockGen. DO NOT EDIT.
// Source: account.go

// Package mock is a generated GoMock package.
package mock

import (
	entities "golang-coding-challenge/models/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountRepo is a mock of AccountRepo interface.
type MockAccountRepo struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepoMockRecorder
}

// MockAccountRepoMockRecorder is the mock recorder for MockAccountRepo.
type MockAccountRepoMockRecorder struct {
	mock *MockAccountRepo
}

// NewMockAccountRepo creates a new mock instance.
func NewMockAccountRepo(ctrl *gomock.Controller) *MockAccountRepo {
	mock := &MockAccountRepo{ctrl: ctrl}
	mock.recorder = &MockAccountRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepo) EXPECT() *MockAccountRepoMockRecorder {
	return m.recorder
}

// GetAccountIDsByUserIDAccountID mocks base method.
func (m *MockAccountRepo) GetAccountIDsByUserIDAccountID(userID, accountID int) ([]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountIDsByUserIDAccountID", userID, accountID)
	ret0, _ := ret[0].([]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIDsByUserIDAccountID indicates an expected call of GetAccountIDsByUserIDAccountID.
func (mr *MockAccountRepoMockRecorder) GetAccountIDsByUserIDAccountID(userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIDsByUserIDAccountID", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountIDsByUserIDAccountID), userID, accountID)
}

// GetAccountUser mocks base method.
func (m *MockAccountRepo) GetAccountUser(userID, accountID int) (entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountUser", userID, accountID)
	ret0, _ := ret[0].(entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountUser indicates an expected call of GetAccountUser.
func (mr *MockAccountRepoMockRecorder) GetAccountUser(userID, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountUser", reflect.TypeOf((*MockAccountRepo)(nil).GetAccountUser), userID, accountID)
}

// UpdateAccountUser mocks base method.
func (m *MockAccountRepo) UpdateAccountUser(accountUser entities.Account, newBalance float64) (entities.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccountUser", accountUser, newBalance)
	ret0, _ := ret[0].(entities.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccountUser indicates an expected call of UpdateAccountUser.
func (mr *MockAccountRepoMockRecorder) UpdateAccountUser(accountUser, newBalance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccountUser", reflect.TypeOf((*MockAccountRepo)(nil).UpdateAccountUser), accountUser, newBalance)
}
