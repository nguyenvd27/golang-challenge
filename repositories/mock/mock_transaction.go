// Code generated by MockGen. DO NOT EDIT.
// Source: transaction.go

// Package mock is a generated GoMock package.
package mock

import (
	entities "golang-coding-challenge/models/entities"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionRepo is a mock of TransactionRepo interface.
type MockTransactionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionRepoMockRecorder
}

// MockTransactionRepoMockRecorder is the mock recorder for MockTransactionRepo.
type MockTransactionRepoMockRecorder struct {
	mock *MockTransactionRepo
}

// NewMockTransactionRepo creates a new mock instance.
func NewMockTransactionRepo(ctrl *gomock.Controller) *MockTransactionRepo {
	mock := &MockTransactionRepo{ctrl: ctrl}
	mock.recorder = &MockTransactionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionRepo) EXPECT() *MockTransactionRepoMockRecorder {
	return m.recorder
}

// CreateTransaction mocks base method.
func (m *MockTransactionRepo) CreateTransaction(trans entities.Transaction) (entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", trans)
	ret0, _ := ret[0].(entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockTransactionRepoMockRecorder) CreateTransaction(trans interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockTransactionRepo)(nil).CreateTransaction), trans)
}

// GetTransactionsByAccountIDs mocks base method.
func (m *MockTransactionRepo) GetTransactionsByAccountIDs(accountIDs []int) ([]entities.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsByAccountIDs", accountIDs)
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsByAccountIDs indicates an expected call of GetTransactionsByAccountIDs.
func (mr *MockTransactionRepoMockRecorder) GetTransactionsByAccountIDs(accountIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsByAccountIDs", reflect.TypeOf((*MockTransactionRepo)(nil).GetTransactionsByAccountIDs), accountIDs)
}

// GetTransactionsWithPaginate mocks base method.
func (m *MockTransactionRepo) GetTransactionsWithPaginate(accountIDs []int, page, size int) ([]entities.Transaction, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsWithPaginate", accountIDs, page, size)
	ret0, _ := ret[0].([]entities.Transaction)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetTransactionsWithPaginate indicates an expected call of GetTransactionsWithPaginate.
func (mr *MockTransactionRepoMockRecorder) GetTransactionsWithPaginate(accountIDs, page, size interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsWithPaginate", reflect.TypeOf((*MockTransactionRepo)(nil).GetTransactionsWithPaginate), accountIDs, page, size)
}
